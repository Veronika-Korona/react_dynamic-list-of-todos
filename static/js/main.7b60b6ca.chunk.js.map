{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","titleQuery","status","handleChange","e","target","name","value","setState","TodosToDisplay","props","todos","filter","todo","title","toLowerCase","includes","completed","filterByStatus","this","selectedUserId","onSelectUser","displayedTodos","className","type","placeholder","onChange","id","defaultValue","map","readOnly","checked","handleChecked","classNames","userId","onClick","React","Component","BASE_URL","getTodos","fetch","then","response","json","CurrentUser","user","loadCurrentUser","prevProps","catch","error","console","warn","onClear","email","phone","App","isLoading","loadTodos","a","selectUser","clearUser","newTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b60b6ca.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable no-console */\nimport classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  onSelectUser(userId:number): void,\n  selectedUserId: number,\n  handleChecked(id:number): void,\n};\n\ntype State = {\n  titleQuery: string;\n  status: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    titleQuery: '',\n    status: 'All',\n  };\n\n  handleChange = (\n    e:React.ChangeEvent<HTMLSelectElement> | React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    } as Pick<State, 'titleQuery'>);\n  };\n\n  TodosToDisplay = () => {\n    const { titleQuery, status } = this.state;\n\n    const filterByStatus = (todo:Todo) => {\n      switch (status) {\n        case 'completed':\n          return todo.completed;\n        case 'notCompleted':\n          return !todo.completed;\n        default:\n          return true;\n      }\n    };\n\n    return this.props.todos.filter(todo => (\n      todo.title.toLowerCase().includes(titleQuery.toLowerCase())\n      && filterByStatus(todo)\n    ));\n  };\n\n  render() {\n    const { todos, selectedUserId, onSelectUser } = this.props;\n    const { status } = this.state;\n\n    const displayedTodos = this.TodosToDisplay();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"Search for todos\"\n            className=\"filterTodo\"\n            name=\"titleQuery\"\n            onChange={this.handleChange}\n          />\n\n          <select\n            className=\"filterTodo\"\n            name=\"status\"\n            id=\"\"\n            defaultValue={status}\n            onChange={this.handleChange}\n          >\n            <option value=\"All\">All</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"notCompleted\">Still in process</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos && displayedTodos.map((todo) => (\n              <li\n                className={todo.completed\n                  ? 'TodoList__item TodoList__item--checked'\n                  : 'TodoList__item TodoList__item--unchecked'}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                    onChange={() => {\n                      this.props.handleChecked(todo.id);\n                    }}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button button', { 'TodoList__user-button--selected': todo.userId === selectedUserId },\n                  )}\n                  type=\"button\"\n                  onClick={() => onSelectUser(todo.userId)}\n                >\n                  {`User: ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (userId:number) => {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json());\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api/api';\n\ninterface Props {\n  userId: number;\n  onClear(): void;\n}\n\ninterface State {\n  user: User | null;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadCurrentUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadCurrentUser();\n    }\n  }\n\n  loadCurrentUser() {\n    getUsers(this.props.userId)\n      .then(user => {\n        this.setState({ user });\n      })\n      .catch(error => {\n        console.warn(error);\n      });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { userId, onClear } = this.props;\n\n    return (\n      <>\n        {user && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                {`Selected user: ${userId}`}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </div>\n        )}\n\n        <button type=\"button\" className=\"button\" onClick={onClear}>\n          Clear\n        </button>\n      </>\n    );\n  }\n}\n","/* eslint-disable no-console */\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  isLoading: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    isLoading: false,\n  };\n\n  componentDidMount() {\n    this.loadTodos();\n  }\n\n  loadTodos = async () => {\n    this.setState({ isLoading: true });\n\n    try {\n      const todos = await getTodos();\n\n      this.setState({\n        todos,\n        isLoading: false,\n      });\n    } catch (error) {\n      console.warn(error);\n      this.setState({ isLoading: false });\n    }\n  };\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  handleChecked = (id:number) => {\n    const newTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    this.setState(() => ({\n      todos: newTodos,\n    }));\n  };\n\n  render() {\n    const { selectedUserId, todos, isLoading } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {isLoading\n            ? 'loading'\n            : (\n              <TodoList\n                todos={todos}\n                selectedUserId={selectedUserId}\n                onSelectUser={this.selectUser}\n                handleChecked={this.handleChecked}\n              />\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} onClear={this.clearUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}